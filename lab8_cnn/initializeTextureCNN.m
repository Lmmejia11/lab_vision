function net = initializeTextureCNN()

f=1/100 ;
net.layers = {} ;
% convolutional: 128x128x1 -> 124x124x20 
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,1,20, 'single'), ...
                           'biases', zeros(1, 20, 'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Non lineal ReLu: 124x124x20 -> 124x124x20 
net.layers{end+1} = struct('type', 'relu') ; 
% convolutional: 124x124x20 -> 58x58x70 
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(9,9,20,70, 'single'), ...
                           'biases', zeros(1, 70, 'single'), ...
                           'stride', 2, ...
                           'pad', 0) ;
% Pooling layer:  58x58x70 -> 29x29x70
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
% Non lineal ReLu: 29x29x70 -> 29x29x70
net.layers{end+1} = struct('type', 'relu') ; 
% convolutional: 29x29x70 -> 27x27x100
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,70,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Non lineal ReLu: 27x27x100 -> 27x27x100
net.layers{end+1} = struct('type', 'relu') ; 
% Pooling layer:  27x27x100 -> 9x9x100
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 3, ...
                           'pad', 0) ;
% convolutional: 9x9x100 -> 1x1x25
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(9,9,100,25, 'single'),...
                           'biases', zeros(1,25,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
% Soft max: 1x1x25 -> 1x1x25
net.layers{end+1} = struct('type', 'softmaxloss') ;
